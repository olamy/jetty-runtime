<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.google.cloud.runtimes.perf</groupId>
		<artifactId>perf</artifactId>
		<version>0.1.0-SNAPSHOT</version>
	</parent>

	<artifactId>perf-runner</artifactId>
	<packaging>jar</packaging>

	<name>Jetty Runtime :: Perf :: Perf Client</name>
	<description>Running load testing</description>

	<properties>
		<mainClass>com.google.cloud.runtime.jetty.perf.PerfRunner</mainClass>
	  <host>jetty-runtime-perf-app-dot-jetty9-work.appspot.com</host>
		<port>443</port>
		<running.time>30</running.time>
		<running.time.unit>m</running.time.unit>
		<transaction_rate>3</transaction_rate>
		<transport>https</transport>
		<users>2</users>
		<profile.json>${basedir}/src/main/resources/loadgenerator_profile.groovy</profile.json>
		<warmup.number>10</warmup.number>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.mortbay.jetty.loadgenerator</groupId>
			<artifactId>jetty-load-generator-starter</artifactId>
			<version>0.2</version>
		</dependency>
		<!-- just to be sure we build this module last -->
		<dependency>
			<groupId>com.google.cloud.runtimes.perf</groupId>
			<artifactId>webapp</artifactId>
			<version>0.1.0-SNAPSHOT</version>
			<type>war</type>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>3.0.0</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<shadedArtifactAttached>true</shadedArtifactAttached>
							<shadedClassifierName>uber</shadedClassifierName>
							<transformers>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>${mainClass}</mainClass>
								</transformer>
							</transformers>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/docker</outputDirectory>
							<resources>
								<resource>
									<directory>${basedir}/src/main/docker</directory>
									<filtering>true</filtering>
									<includes>
										<include>*</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>


		</plugins>
	</build>

	<profiles>
		<profile>
			<id>run-perf</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>run-perf-tests</id>
								<phase>install</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>java</executable>
									<arguments>
										<argument>-showversion</argument>
										<argument>-Xmx2048m</argument>
										<argument>-Xms2048m</argument>
										<!--
										<argument>-XX:+PrintCommandLineFlags</argument>
										<argument>-XX:+PrintGCTimeStamps</argument>
										<argument>-XX:+PrintGCDetails</argument>
										<argument>-XX:+UseParallelOldGC</argument>
										<argument>-XX:+AggressiveOpts</argument>
										-->
										<!--<argument>-XX:+UseConcMarkSweepGC</argument>-->
										<!--<argument>-XX:+UseG1GC</argument>-->
										<argument>-cp</argument>
										<classpath />
										<argument>${mainClass}</argument>
										<argument>-Dwarmup.number=${warmup.number}</argument>
										<argument>-h</argument><argument>${host}</argument>
										<argument>--port</argument><argument>${port}</argument>
										<argument>--running-time</argument><argument>${running.time}</argument>
										<argument>--running-time-unit</argument><argument>${running.time.unit}</argument>
										<argument>--transaction-rate</argument><argument>${transaction_rate}</argument>
										<argument>--transport</argument><argument>${transport}</argument>
										<argument>--users</argument><argument>${users}</argument>
										<argument>--profile-groovy-path</argument><argument>${profile.json}</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>docker</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>com.spotify</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<configuration>
							<imageName>jetty-perf-runner:${project.version}</imageName>
							<baseImage>${docker.openjdk.image}</baseImage>
							<cmd>java -jar /${project.build.finalName}-uber.jar -Dwarmup.number=${warmup.number} -h ${host} --port ${port} --running-time ${running.time} --running-time-unit ${running.time.unit} --transaction-rate ${transaction_rate}  --transport ${transport} --users ${users} --profile-groovy-path /loadgenerator_profile.groovy</cmd>
							<resources>
								<resource>
									<targetPath>/</targetPath>
									<directory>${project.build.directory}</directory>
									<include>${project.build.finalName}-uber.jar</include>
								</resource>
								<resource>
									<targetPath>/</targetPath>
									<directory>${basedir}/src/main/resources</directory>
									<include>loadgenerator_profile.groovy</include>
								</resource>

							</resources>
						</configuration>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

				</plugins>
			</build>
		</profile>

	</profiles>

</project>
